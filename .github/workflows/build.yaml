name: Build Serval
on:
  push:
    tags:
      - 'v*'

env:
      CARGO_TERM_COLOR: always

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: create a github release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: serval-mesh ${{ github.ref }}
          draft: true
          prerelease: false

  linux:
    name: build for linux
    runs-on: ubuntu-latest
    needs: [release]
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            target: x86_64-unknown-linux-gnu
            cross: false
          - arch: arm64
            target: aarch64-unknown-linux-gnu
            cross: true
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.cross }}
          args: --release --target ${{ matrix.target }}

      # TODO: might want to add this to CLI at some point
      # - name: write out completions
      #   run: |
      #     ./target/release/serval completions bash > completions.bash
      #     ./target/release/serval completions zsh > completions.zsh
      #     ./target/release/serval completions fish > completions.fish

      - name: tar it up
        run: |
          tar cf serval-mesh_${{ matrix.arch }}_linux.tar -C target/release serval serval-agent test-runner
          # tar f serval-mesh_${{ matrix.arch }}_linux.tar -r completions.bash completions.zsh completions.fish
          gzip serval-mesh_${{ matrix.arch }}_linux.tar

      - name: upload ${{ matrix.arch }} linux release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: serval-mesh_${{ matrix.arch }}_linux.tar.gz
          asset_name: serval-mesh_${{ matrix.arch }}_linux.tar.gz
          asset_content_type: application/octet-stream

  macos:
    name: build for macos
    runs-on: macos-latest
    needs: [release]
    strategy:
      matrix:
        arch: [intel, arm]
        include:
          - arch: intel
            target: x86_64-apple-darwin
            cross: false
          - arch: arm
            target: aarch64-apple-darwin
            cross: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - run: rustup target install ${{ matrix.target }}
        if: ${{ matrix.arch == 'arm'}}

      - run: cargo build --target ${{ matrix.target }} --release

      - name: write out completions
        run: |
          ./target/release/serval-mesh completions bash > completions.bash
          ./target/release/serval-mesh completions zsh > completions.zsh
          ./target/release/serval-mesh completions fish > completions.fish

      - name: tar up the Mac ${{ matrix.arch }} release
        run: |
          tar cf serval-mesh_${{ matrix.arch }}_darwin.tar -C target/release serval serval-agent test-runner
          # tar f serval-mesh_${{ matrix.arch }}_darwin.tar -r completions.bash completions.zsh completions.fish
          gzip serval-mesh_${{ matrix.arch }}_darwin.tar

      - name: upload darwin ${{ matrix.arch }} release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_path: serval-mesh_${{ matrix.arch }}_darwin.tar.gz
          asset_name: serval-mesh_${{ matrix.arch }}_darwin.tar.gz
          asset_content_type: application/octet-stream